name: GHL WAV downloader (cron)

on:
  schedule:
    - cron: "*/30 * * * *"   # cada 30 minutos (UTC) — ajusta si quieres
  workflow_dispatch:          # para ejecutarlo manualmente desde Actions

permissions:
  contents: read

concurrency:
  group: ghl-wav-cron
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Instalar Playwright + dependencias
        run: |
          npm ci || npm i
          npx playwright install --with-deps chromium

      - name: Ejecutar script (descarga .wav)
        env:
          # === Parámetros del scraper ===
          TARGET_URL: ${{ secrets.TARGET_URL }}
          MIN_MB: "1"                       # pon "0" para probar flujo y luego vuelve a 1
          WAIT_FOR: ${{ secrets.WAIT_FOR }} # ej. ".ant-table" o ".ant-table-content"
          TIMEOUT_MS: "180000"
          DL_TIMEOUT_MS: "180000"
          HEADLESS: "true"
          SCROLL_ROUNDS: ${{ secrets.SCROLL_ROUNDS }} # ej. "4"
          PAUSE_BETWEEN: "1200"
          START_DELAY_MS: "10000"
          COLLECT_RETRY: "1"
          COLLECT_RETRY_DELAY_MS: "5000"

          # === Autenticación (usa UNA de las dos opciones) ===
          # Opción A (recomendada con 2FA): estado de sesión en Base64
          STORAGE_STATE_BASE64: ${{ secrets.STORAGE_STATE_BASE64 }}
          # Opción B (sin 2FA): usuario/clave (+ TOTP opcional)
          GHL_EMAIL: ${{ secrets.GHL_EMAIL }}
          GHL_PASSWORD: ${{ secrets.GHL_PASSWORD }}
          TOTP_SECRET: ${{ secrets.TOTP_SECRET }}
        run: node script.js

      # (Opcional) Subir outputs a Artifacts de GitHub como respaldo
      - name: Subir outputs como artifact (backup)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: outputs
          path: outputs/
          if-no-files-found: warn

        - name: Instalar rclone
        run: |
          curl -fsSL https://rclone.org/install.sh | sudo bash

      - name: Escribir credenciales de Service Account
        run: |
          printf "%s" '${{ secrets.GDRIVE_SA_JSON }}' > sa.json

      - name: Configurar rclone remoto "gdrive"
        env:
          GDRIVE_FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}
        run: |
          cat > rclone.conf <<EOF
          [gdrive]
          type = drive
          scope = drive
          service_account_file = ${GITHUB_WORKSPACE}/sa.json
          root_folder_id = ${GDRIVE_FOLDER_ID}
          EOF

      # (Opcional) Verifica que rclone ve la carpeta raíz configurada
      - name: Probar conexión a Drive
        env:
          GDRIVE_FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}
        run: |
          echo "Usando root_folder_id=${GDRIVE_FOLDER_ID}"
          rclone lsd gdrive: --config ./rclone.conf || true

      - name: Subir outputs/ a Google Drive
        if: always()
        run: |
          if [ -d "outputs" ]; then
            rclone copy "outputs" "gdrive:" \
              --config ./rclone.conf \
              --transfers 4 --checkers 8 \
              --drive-chunk-size 64M \
              --drive-stop-on-upload-limit \
              --progress
          else
            echo "No hay carpeta outputs/ para subir."
          fi


      # # Variante B (opcional): subir a subcarpeta por fecha/hora en UTC
      # - name: Subir outputs/ a subcarpeta fechada en Drive
      #   if: always()
      #   run: |
      #     if [ -d "outputs" ]; then
      #       DATE_DIR="$(date -u +'%Y-%m-%dT%H-%M-%SZ')"
      #       rclone mkdir "gdrive/${DATE_DIR}" --config ./rclone.conf
      #       rclone copy "outputs" "gdrive/${DATE_DIR}" \
      #         --config ./rclone.conf \
      #         --transfers 4 --checkers 8 \
      #         --drive-chunk-size 64M \
      #         --drive-stop-on-upload-limit \
      #         --progress
      #     else
      #       echo "No hay carpeta outputs/ para subir."
      #     fi
